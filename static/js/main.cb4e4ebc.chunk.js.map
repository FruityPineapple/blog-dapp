{"version":3,"sources":["context/functions/getPostById.ts","context/functions/getPosts.ts","context/functions/getUser.ts","context/functions/initBlog.ts","functions/getAvatarUrl.ts","context/Blog.tsx","functions/getRandomName.ts","components/Button.tsx","components/EditProfile.tsx","components/InterestingSkeleton.tsx","components/PostForm.tsx","components/EditPost.tsx","functions/displayKey.ts","components/PostCard.tsx","components/SponsoredSkeleton.tsx","pages/dashboard.tsx","router.tsx","App.tsx","index.tsx"],"names":["getPostById","postId","program","a","account","postState","fetch","PublicKey","post","userId","user","toString","SystemProgram","programId","id","title","content","prePostId","prePostKey","console","log","message","getPosts","args","sub","observer","Observable","subscriber","fromPostId","nextPostId","next","complete","start","unsubscribe","getUser","walletKey","userAccount","getUserKey","userState","publicKey","_user","name","avatar","initBlog","blogKey","blogState","blog","blogAccount","Keypair","generate","genesisPostAccount","rpc","accounts","authority","systemProgram","signers","getAvatarUrl","key","md5","PROGRAM_KEY","idl","metadata","address","BLOG_KEY","fromSeed","TextEncoder","encode","slice","getProgram","provider","Program","BlogContext","createContext","undefined","posts","createPost","updatePost","deletePost","deleteLatestPost","updateUser","fetchUser","useBlog","context","useContext","Error","BlogProvider","children","useState","setUser","setPosts","setProvider","wallet","useAnchorWallet","connection","useConnection","signupUser","useCallback","data","tx","nameGenerator","postAccount","oldPost","updatedPost","map","D","nextPostAccount","useEffect","Provider","POST_EVENT_LISTENER","currentPostKey","subscribe","addEventListener","event","label","nextPost","filter","removeEventListener","catch","e","value","Button","loading","disabled","className","leftIcon","props","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","EditProfile","oldName","referenceElementRef","useRef","popperElementRef","usePopper","current","styles","attributes","setLoading","setName","onUpdateProfile","open","ref","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Panel","style","omit","popper","right","onChange","target","type","placeholder","onClick","InterestingSkeleton","PostForm","onSubmit","postTitle","postContent","setPostContent","setPostTitle","formHeader","buttonText","rows","EditPost","setOpen","Root","as","Fragment","onClose","Child","Overlay","displayKey","pubKey","length","substring","PostCard","date","currentUser","loadingDelete","setLoadingDelete","openEdit","setOpenEdit","src","alt","o","SponsoredSkeleton","Dashboard","connecting","setConnecting","useWallet","connected","select","onConnect","WalletName","Phantom","onCreatePost","i","Router","path","wallets","getPhantomWallet","endPoint","clusterApiUrl","App","endpoint","autoConnect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb4e4ebc.chunk.js","sourcesContent":["import { Program } from \"@project-serum/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nexport async function getPostById(postId: string, program: Program) {\n  try {\n    const post: any = await program.account.postState.fetch(\n      new PublicKey(postId)\n    );\n\n    const userId = post.user.toString();\n    if (userId === SystemProgram.programId.toString()) {\n      return;\n    }\n\n    return {\n      id: postId,\n      title: post.title,\n      content: post.content,\n      userId,\n      prePostId: post.prePostKey.toString(),\n    };\n  } catch (e: any) {\n    console.log(e.message);\n  }\n}\n","import { Program } from \"@project-serum/anchor\";\nimport { Observable, Subscriber } from \"rxjs\";\nimport { Post } from \"src/context/Blog\";\nimport { getPostById } from \"src/context/functions/getPostById\";\n\nexport function getPosts(args: {\n  program: Program;\n  fromPostId: string;\n  toPostId?: string;\n}) {\n  let sub: Subscriber<Post> | undefined;\n\n  const cancel = () => sub?.unsubscribe();\n  const observer = new Observable<Post>((subscriber) => {\n    sub = subscriber;\n\n    async function start() {\n      const { program, fromPostId } = args;\n      let nextPostId: string | null = fromPostId;\n\n      while (!!nextPostId) {\n        const post: Post | undefined = await getPostById(nextPostId, program);\n        if (!post) {\n          break;\n        }\n\n        subscriber.next(post);\n        nextPostId = post.prePostId;\n      }\n\n      subscriber.complete();\n    }\n\n    start();\n  });\n\n  return [observer, cancel] as const;\n}\n","import { Program } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getUserKey } from \"src/context/Blog\";\n\nexport async function getUser(program: Program, walletKey: PublicKey) {\n  const userAccount = getUserKey(walletKey);\n\n  try {\n    const _user: any = await program.account.userState.fetch(\n      userAccount.publicKey\n    );\n\n    const user = {\n      id: userAccount.publicKey.toString(),\n      name: _user.name,\n      avatar: _user.avatar,\n    };\n\n    return user;\n  } catch {}\n}\n","import { Program } from \"@project-serum/anchor\";\nimport { Keypair, PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nexport async function initBlog(\n  program: Program,\n  blogKey: PublicKey,\n  walletKey: PublicKey\n) {\n  try {\n    const blog: any = await program.account.blogState.fetch(blogKey);\n    return blog;\n  } catch {\n    const blogAccount = Keypair.generate();\n    const genesisPostAccount = Keypair.generate();\n\n    await program.rpc.initBlog({\n      accounts: {\n        authority: walletKey,\n        systemProgram: SystemProgram.programId,\n        blogAccount: blogAccount.publicKey,\n        genesisPostAccount: genesisPostAccount.publicKey,\n      },\n      signers: [blogAccount, genesisPostAccount],\n    });\n\n    const blog = await program.account.blogState.fetch(blogAccount.publicKey);\n\n    console.log(\"Blog pubkey: \", blogAccount.publicKey.toString());\n    return blog;\n  }\n}\n","import md5 from \"md5\";\n\nexport const getAvatarUrl = (key: string) => {\n  return `https://gravatar.com/avatar/${md5(key)}?s=400&d=robohash&r=x`;\n};\n","import { Idl, Program, Provider } from \"@project-serum/anchor\";\nimport { useAnchorWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport { Keypair, PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport {\n  createContext,\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useState\n} from \"react\";\nimport { getPostById } from \"src/context/functions/getPostById\";\nimport { getPosts } from \"src/context/functions/getPosts\";\nimport { getUser } from \"src/context/functions/getUser\";\nimport { initBlog } from \"src/context/functions/initBlog\";\nimport { getAvatarUrl } from \"src/functions/getAvatarUrl\";\nimport { getRandomName } from \"src/functions/getRandomName\";\nimport idl from \"src/idl.json\";\n\nconst PROGRAM_KEY = new PublicKey(idl.metadata.address);\nconst BLOG_KEY = new PublicKey(\"8CcWXSUTTU5P1GBsmoqqaBeSFHmGMHKcSqMZ8ZN8bCSK\");\n\n// create unique user key\nexport const getUserKey = (walletKey: PublicKey) => {\n  const userAccount = Keypair.fromSeed(\n    new TextEncoder().encode(\n      `${PROGRAM_KEY.toString().slice(0, 15)}__${walletKey\n        .toString()\n        .slice(0, 15)}`\n    )\n  );\n\n  return userAccount;\n};\n\nfunction getProgram(provider: Provider) {\n  return new Program(idl as Idl, PROGRAM_KEY, provider);\n}\n\ninterface PostData {\n  title: string;\n  content: string;\n}\n\nexport interface Post extends PostData {\n  id: string;\n  userId: string;\n  prePostId: string | null;\n}\n\ninterface UserData {\n  name: string;\n  avatar: string;\n}\n\ninterface User extends UserData {\n  id: string;\n}\n\ninterface IBlogContext {\n  user: User | undefined;\n  posts: Post[];\n  createPost: (data: PostData) => Promise<string | undefined>;\n  updatePost: (oldPost: Post, data: PostData) => Promise<string | undefined>;\n  deletePost: (\n    postId: string,\n    nextPostId: string\n  ) => Promise<string | undefined>;\n  deleteLatestPost: (postId: string) => Promise<string | undefined>;\n  updateUser: (name: string) => Promise<string | undefined>;\n  fetchUser: () => Promise<void>;\n}\n\nconst BlogContext = createContext<IBlogContext>({\n  user: undefined,\n  posts: [],\n  createPost: async () => undefined,\n  updatePost: async () => undefined,\n  deletePost: async () => undefined,\n  deleteLatestPost: async () => undefined,\n  updateUser: async () => undefined,\n  fetchUser: async () => undefined,\n});\n\nexport const useBlog = () => {\n  const context = useContext(BlogContext);\n  if (!context) {\n    throw new Error(\"Parent must be wrapped inside PostsProvider\");\n  }\n\n  return context;\n};\n\nexport const BlogProvider: FC = ({ children }) => {\n  const [user, setUser] = useState<User>();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [provider, setProvider] = useState<Provider>();\n\n  const wallet = useAnchorWallet();\n  const { connection } = useConnection();\n\n  const signupUser = useCallback(\n    async (data: { name: string; avatar: string }) => {\n      if (provider) {\n        const { name, avatar } = data;\n        const program = getProgram(provider);\n        const userAccount = getUserKey(provider.wallet.publicKey);\n        // const userAccount = Keypair.generate();\n\n        console.log({ name, avatar });\n        try {\n          const tx = await program.rpc.signupUser(name, avatar, {\n            accounts: {\n              authority: provider.wallet.publicKey,\n              userAccount: userAccount.publicKey,\n              systemProgram: SystemProgram.programId,\n            },\n            signers: [userAccount],\n          });\n\n          return tx;\n        } catch {}\n      }\n    },\n    [provider]\n  );\n\n  const fetchUser = useCallback(async () => {\n    if (provider) {\n      const program = getProgram(provider);\n      const user = await getUser(program, provider.wallet.publicKey);\n\n      if (!user) {\n        const name = getRandomName();\n        const avatar = getAvatarUrl(name);\n        await signupUser({ name, avatar });\n        const user = await getUser(program, provider.wallet.publicKey);\n\n        setUser(user);\n      } else {\n        setUser(user);\n      }\n    }\n  }, [provider, signupUser]);\n\n  const updateUser = useCallback(\n    async (name: string) => {\n      const avatar = getAvatarUrl(name);\n      if (provider) {\n        const program = getProgram(provider);\n        const userAccount = getUserKey(provider.wallet.publicKey);\n\n        try {\n          const tx = await program.rpc.updateUser(name, avatar, {\n            accounts: {\n              authority: provider.wallet.publicKey,\n              userAccount: userAccount.publicKey,\n              systemProgram: SystemProgram.programId,\n            },\n          });\n\n          await fetchUser();\n          return tx;\n        } catch {}\n      }\n    },\n    [fetchUser, provider]\n  );\n\n  const createPost = useCallback(\n    async (data: PostData) => {\n      if (!!provider && !!user) {\n        const { title, content = \"\" } = data;\n        const program = getProgram(provider);\n        const postAccount = Keypair.generate();\n\n        const tx = await program.rpc.createPost(title, content, {\n          accounts: {\n            blogAccount: BLOG_KEY,\n            authority: provider.wallet.publicKey,\n            userAccount: new PublicKey(user.id),\n            postAccount: postAccount.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [postAccount],\n        });\n\n        return tx;\n      }\n    },\n    [provider, user]\n  );\n\n  const updatePost = useCallback(\n    async (oldPost: Post, data: PostData) => {\n      if (provider) {\n        const { title, content } = data;\n        const program = getProgram(provider);\n\n        const tx = await program.rpc.updatePost(title, content, {\n          accounts: {\n            authority: provider.wallet.publicKey,\n            postAccount: new PublicKey(oldPost.id),\n          },\n        });\n\n        const updatedPost = await getPostById(oldPost.id, program);\n        if (updatedPost) {\n          setPosts((posts) =>\n            posts.map((D) => {\n              if (D.id === oldPost.id) {\n                return updatedPost;\n              }\n\n              return D;\n            })\n          );\n        }\n\n        return tx;\n      }\n    },\n    [provider]\n  );\n\n  const deletePost = useCallback(\n    async (postId: string, nextPostId: string) => {\n      if (!!provider) {\n        const program = getProgram(provider);\n\n        const tx = await program.rpc.deletePost({\n          accounts: {\n            authority: provider.wallet.publicKey,\n            postAccount: new PublicKey(postId),\n            nextPostAccount: new PublicKey(nextPostId),\n          },\n        });\n\n        return tx;\n      }\n    },\n    [provider]\n  );\n\n  const deleteLatestPost = useCallback(\n    async (postId: string) => {\n      if (!!provider) {\n        const program = getProgram(provider);\n\n        const tx = await program.rpc.deleteLatestPost({\n          accounts: {\n            authority: provider.wallet.publicKey,\n            postAccount: new PublicKey(postId),\n            blogAccount: BLOG_KEY,\n          },\n        });\n\n        return tx;\n      }\n    },\n    [provider]\n  );\n\n  // set provider\n  useEffect(() => {\n    if (wallet) {\n      const provider = new Provider(connection, wallet, {});\n      setProvider(provider);\n    }\n  }, [connection, wallet]);\n\n  // set initial posts\n  useEffect(() => {\n    let POST_EVENT_LISTENER: any;\n\n    async function start() {\n      if (provider) {\n        const program = getProgram(provider);\n        const blog: any = await initBlog(\n          program,\n          BLOG_KEY,\n          provider.wallet.publicKey\n        );\n\n        // initially load all the posts\n        const [observer] = getPosts({\n          program,\n          fromPostId: blog.currentPostKey.toString(),\n        });\n\n        observer.subscribe({\n          next(post) {\n            setPosts((posts) => [...posts, post]);\n          },\n          complete() {\n            // listen create/update/delete post events,\n            // after fetching all posts\n\n            POST_EVENT_LISTENER = program.addEventListener(\n              \"PostEvent\",\n              async (event) => {\n                const postId = event?.postId?.toString();\n                const nextPostId = event?.nextPostId?.toString();\n\n                if (postId) {\n                  switch (event.label) {\n                    case \"CREATE\":\n                      const post = await getPostById(postId, program);\n\n                      if (post) {\n                        setPosts((posts) => [post, ...posts]);\n                      }\n                      break;\n\n                    case \"UPDATE\":\n                      const updatedPost = await getPostById(postId, program);\n                      if (updatedPost) {\n                        setPosts((posts) =>\n                          posts.map((D) => {\n                            if (D.id === postId) {\n                              return updatedPost;\n                            }\n\n                            return D;\n                          })\n                        );\n                      }\n                      break;\n\n                    case \"DELETE\":\n                      const nextPost = nextPostId\n                        ? await getPostById(nextPostId, program)\n                        : null;\n\n                      setPosts((posts) =>\n                        posts\n                          .filter(({ id }) => id !== postId)\n                          .map((post) => {\n                            if (post.id === nextPostId && nextPost) {\n                              return nextPost;\n                            }\n\n                            return post;\n                          })\n                      );\n                      break;\n\n                    default:\n                      break;\n                  }\n                }\n              }\n            );\n          },\n        });\n      }\n    }\n\n    start();\n\n    return () => {\n      if (provider && POST_EVENT_LISTENER) {\n        const program = getProgram(provider);\n\n        program.removeEventListener(POST_EVENT_LISTENER).catch((e) => {\n          console.log(\"error: \", e.message);\n        });\n      }\n    };\n  }, [provider]);\n\n  return (\n    <BlogContext.Provider\n      value={{\n        user,\n        posts,\n        createPost,\n        updatePost,\n        deletePost,\n        fetchUser,\n        updateUser,\n        deleteLatestPost,\n      }}\n    >\n      {children}\n    </BlogContext.Provider>\n  );\n};\n","import nameGenerator from \"@afuggini/namegenerator\";\n\nexport const getRandomName = () => {\n  return nameGenerator(\" \");\n};\n","import { FC, MouseEvent, ReactElement } from \"react\";\n\ninterface ButtonProps {\n  className?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  leftIcon?: ReactElement;\n  onClick?: (e: MouseEvent<HTMLElement>) => void;\n}\n\nexport const Button: FC<ButtonProps> = ({\n  children,\n  loading = false,\n  disabled,\n  className = \"\",\n  leftIcon,\n  ...props\n}) => {\n  disabled = disabled || loading;\n\n  return (\n    <button\n      disabled={disabled}\n      className={`rounded-lg flex justify-center items-center py-2 px-4 border border-transparent text-sm font-medium text-white bg-gradient-to-r from-indigo-400  to-green-500 focus:outline-none shadow-md \n\t\t\t${className} ${\n        disabled\n          ? \"opacity-60 cursor-not-allowed\"\n          : \"transform hover:-translate-y-px focus:shadow-sm focus:-translate-y-0\"\n      }\n\t\t\t`}\n      {...props}\n    >\n      {!disabled && !loading && leftIcon}\n      {disabled && !loading && (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-5 w-5 mr-1\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"\n          />\n        </svg>\n      )}\n      {loading && (\n        <svg\n          className=\"animate-spin h-5 w-5 text-white mr-1\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"currentColor\"\n            d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\"\n          />\n        </svg>\n      )}\n      {children}\n    </button>\n  );\n};\n","import { Popover, Transition } from \"@headlessui/react\";\nimport { omit } from \"lodash-es\";\nimport { FC, useRef, useState } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { Button } from \"src/components/Button\";\nimport { useBlog } from \"src/context/Blog\";\n\ninterface EditProfileProps {\n  name: string;\n}\n\nexport const EditProfile: FC<EditProfileProps> = ({ name: oldName }) => {\n  const referenceElementRef = useRef<any>();\n  const popperElementRef = useRef<any>();\n  const { styles, attributes } = usePopper(\n    referenceElementRef.current,\n    popperElementRef.current\n  );\n\n  const { updateUser } = useBlog();\n\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState(oldName);\n\n  const onUpdateProfile = async () => {\n    setLoading(true);\n    await updateUser(name);\n    setLoading(false);\n  };\n\n  return (\n    <Popover className=\"relative\">\n      {({ open }) => {\n        return (\n          <>\n            <Popover.Button ref={referenceElementRef}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6 text-gray-600\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\"\n                />\n              </svg>\n            </Popover.Button>\n\n            <Transition\n              show={open}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 translate-y-4\"\n              enterTo=\"opacity-100 translate-y-8\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 translate-y-0\"\n              leaveTo=\"opacity-0 translate-y-4\"\n            >\n              <Popover.Panel\n                ref={popperElementRef}\n                style={{\n                  ...omit(styles.popper, [\"transform\", \"left\", \"top\"]),\n                  right: 0,\n                }}\n                {...attributes.popper}\n                className=\"absolute bottom-8 z-20 transform transition-all\"\n              >\n                <div className=\"glass rounded-xl shadow-xl py-4 px-6 flex flex-col\">\n                  <input\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    type=\"text\"\n                    placeholder=\"Your lovely name\"\n                    className=\"bg-white rounded-3xl h-10 px-4\"\n                  />\n                  <Button\n                    loading={loading}\n                    onClick={onUpdateProfile}\n                    className=\"w-full mt-3\"\n                  >\n                    Save\n                  </Button>\n                </div>\n              </Popover.Panel>\n            </Transition>\n          </>\n        );\n      }}\n    </Popover>\n  );\n};\n","export const InterestingSkeleton = () => {\n  return (\n    <div className=\"card glass relative overflow-hidden flex shadow rounded-lg h-36 bg-white p-4 mt-4\">\n      <div className=\"rounded-lg h-full w-32 bg-white\"></div>\n      <div className=\"flex-1 ml-3\">\n        <div className=\"w-3/4 bg-white rounded-xl h-3 mt-1\"></div>\n        <div className=\"w-2/4 bg-white rounded-xl h-3 mt-3\"></div>\n      </div>\n    </div>\n  );\n};\n","import { FC, ReactNode, useState } from \"react\";\nimport { Button } from \"src/components/Button\";\nimport { useBlog } from \"src/context/Blog\";\n\ninterface PostFormProps {\n  postTitle: string;\n  postContent: string;\n  buttonText?: string;\n  formHeader?: ReactNode;\n  setPostTitle(title: string): void;\n  setPostContent(content: string): void;\n  onSubmit(): Promise<void>;\n}\n\nexport const PostForm: FC<PostFormProps> = (props) => {\n  const { user } = useBlog();\n  const {\n    onSubmit,\n    postTitle,\n    postContent,\n    setPostContent,\n    setPostTitle,\n    formHeader,\n    buttonText = \"Post\",\n  } = props;\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <div className=\"glass rounded-lg py-4 px-6 bg-white flex flex-col shadow\">\n      {formHeader}\n      <input\n        value={postTitle}\n        onChange={(e) => setPostTitle(e.target.value)}\n        type=\"text\"\n        placeholder=\"Post title\"\n        className=\"bg-white rounded-3xl h-10 px-4\"\n      />\n      <textarea\n        value={postContent}\n        onChange={(e) => setPostContent(e.target.value)}\n        name=\"content\"\n        id=\"content-area\"\n        rows={3}\n        placeholder=\"Describe your post...\"\n        className=\"bg-white rounded-xl px-4 py-2 mt-3\"\n      ></textarea>\n      <Button\n        className=\"mt-3\"\n        disabled={!user}\n        loading={loading}\n        onClick={async () => {\n          setLoading(true);\n          await onSubmit();\n          setLoading(false);\n        }}\n      >\n        {buttonText}\n      </Button>\n    </div>\n  );\n};\n","import { Dialog, Transition } from \"@headlessui/react\";\nimport { FC, Fragment, useState } from \"react\";\nimport { PostForm } from \"src/components/PostForm\";\nimport { Post, useBlog } from \"src/context/Blog\";\n\ninterface EditPostProps {\n  post: Post;\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\nexport const EditPost: FC<EditPostProps> = (props) => {\n  const { open, setOpen, post } = props;\n  const { title, content } = post;\n  const [postTitle, setPostTitle] = useState(title);\n  const [postContent, setPostContent] = useState(content);\n\n  const { updatePost } = useBlog();\n\n  return (\n    <Transition.Root show={open} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        className=\"fixed z-10 inset-0 overflow-y-auto\"\n        onClose={setOpen}\n      >\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n          </Transition.Child>\n\n          <span\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n            aria-hidden=\"true\"\n          >\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div className=\"inline-block align-bottom bg-transparent rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n              <PostForm\n                postTitle={postTitle}\n                postContent={postContent}\n                setPostTitle={setPostTitle}\n                setPostContent={setPostContent}\n                onSubmit={async () => {\n                  await updatePost(post, {\n                    title: postTitle,\n                    content: postContent,\n                  });\n                  setOpen(false);\n                }}\n                buttonText=\"Update\"\n                formHeader={\n                  <div className=\"flex justify-end mb-3\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-5 w-5 cursor-pointer text-gray-600  transition duration-100 ease-in-out transform hover:scale-110\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                      onClick={() => setOpen(false)}\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </div>\n                }\n              />\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const displayKey = (pubKey: PublicKey) => {\n  const key = pubKey.toString();\n\n  return key.length > 20\n    ? `${key.substring(0, 4)}...${key.substring(key.length - 4, key.length)}`\n    : key;\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { FC, useState } from \"react\";\nimport { EditPost } from \"src/components/EditPost\";\nimport { useBlog } from \"src/context/Blog\";\nimport { displayKey } from \"src/functions/displayKey\";\n\ninterface PostCardProps {\n  id: string;\n  title: string;\n  content: string;\n  user: string;\n  date: string;\n  prePostId: string | null;\n  nextPostId: string | undefined;\n}\n\nexport const PostCard: FC<PostCardProps> = (props) => {\n  const { id, title, content, user, date, nextPostId, prePostId } = props;\n  const { user: currentUser, deletePost, deleteLatestPost } = useBlog();\n\n  const [loadingDelete, setLoadingDelete] = useState(false);\n  const [openEdit, setOpenEdit] = useState(false);\n\n  return (\n    <div className=\"glass rounded-lg py-4 px-6 bg-white shadow flex flex-col mt-4\">\n      <h3 className=\"font-bold text-lg text-gray-600\">{title}</h3>\n      <p className=\"my-2\">{content}</p>\n      <div className=\"flex justify-between items-end\">\n        <div className=\"flex items-center mt-2\">\n          <img\n            src=\"https://gravatar.com/avatar/0c3178b383820ae4f3f5b230717c4082?s=400&d=robohash&r=x\"\n            alt=\"avatar\"\n            className=\"w-10 h-10 rounded-full bg-gray-200 shadow ring-2 ring-indigo-400 ring-offset-2 ring-opacity-50\"\n          />\n          <div className=\"mx-3\">\n            <h3 className=\"font-bold text-gray-600 capitalize\">\n              @{displayKey(new PublicKey(user))}\n            </h3>\n            <p className=\"text-xs\">{date}</p>\n          </div>\n        </div>\n        {user === currentUser?.id && (\n          <div className=\"flex items-center\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-5 w-5 mr-2 text-green-500 transition duration-100 ease-in-out transform hover:scale-110 cursor-pointer\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              onClick={() => setOpenEdit(true)}\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\n              />\n            </svg>\n            <EditPost\n              post={{\n                title,\n                content,\n                id,\n                userId: user,\n                prePostId,\n              }}\n              open={openEdit}\n              setOpen={(o) => setOpenEdit(o)}\n            />\n\n            <button\n              disabled={loadingDelete}\n              className={\n                loadingDelete ? \"cursor-not-allowed\" : \"cursor-pointer\"\n              }\n              onClick={async () => {\n                setLoadingDelete(true);\n                if (nextPostId) {\n                  await deletePost(id, nextPostId);\n                } else {\n                  await deleteLatestPost(id);\n                }\n                setLoadingDelete(false);\n              }}\n            >\n              {loadingDelete ? (\n                <svg\n                  className=\"animate-spin h-5 w-5 text-red-500\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-5 w-5 text-red-500 transition duration-100 ease-in-out transform hover:scale-110 cursor-pointer\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n                  />\n                </svg>\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","export const SponsoredSkeleton = () => {\n  return (\n    <div className=\"card glass relative overflow-hidden flex flex-col shadow rounded-lg bg-white p-4 mt-4\">\n      <div className=\"rounded-lg h-32 bg-white\"></div>\n      <div className=\"flex-1 mt-4\">\n        <div className=\"w-3/4 bg-white rounded-xl h-3 mt-1\"></div>\n        <div className=\"w-2/4 bg-white rounded-xl h-3 mt-3\"></div>\n      </div>\n    </div>\n  );\n};\n","import { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName } from \"@solana/wallet-adapter-wallets\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"src/components/Button\";\nimport { EditProfile } from \"src/components/EditProfile\";\nimport { InterestingSkeleton } from \"src/components/InterestingSkeleton\";\nimport { PostCard } from \"src/components/PostCard\";\nimport { PostForm } from \"src/components/PostForm\";\nimport { SponsoredSkeleton } from \"src/components/SponsoredSkeleton\";\nimport { useBlog } from \"src/context/Blog\";\nimport { displayKey } from \"src/functions/displayKey\";\n\nexport const Dashboard = () => {\n  const [connecting, setConnecting] = useState(false);\n  const { connected, select, publicKey } = useWallet();\n  const { user, posts, fetchUser, createPost } = useBlog();\n\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postContent, setPostContent] = useState(\"\");\n\n  const onConnect = () => {\n    setConnecting(true);\n    select(WalletName.Phantom);\n  };\n\n  const onCreatePost = useCallback(\n    async (title: string, content: string) => {\n      try {\n        await createPost({ title, content });\n        setPostTitle(\"\");\n        setPostContent(\"\");\n      } catch {\n        // show toast message\n      }\n    },\n    [createPost]\n  );\n\n  useEffect(() => {\n    if (publicKey) {\n      fetchUser();\n    }\n  }, [fetchUser, publicKey]);\n\n  useEffect(() => {\n    if (user) {\n      setConnecting(false);\n    }\n  }, [user]);\n\n  return (\n    <div className=\"dashboard background-color overflow-auto h-screen\">\n      <header className=\"fixed z-10 w-full h-14 glass shadow-md\">\n        <div className=\"flex justify-between items-center h-full container\">\n          <h2 className=\"text-2xl font-bold\">\n            👻{\" \"}\n            <span className=\"text-transparent bg-clip-text bg-gradient-to-br from-indigo-300  to-green-600\">\n              BloG\n            </span>\n          </h2>\n          {connected ? (\n            <div className=\"flex items-center\">\n              <img\n                src={user?.avatar}\n                alt=\"avatar\"\n                className=\"w-8 h-8 rounded-full bg-gray-200 shadow ring-2 ring-indigo-400 ring-offset-2 ring-opacity-50\"\n              />\n              <p className=\"text-gray-600 font-bold text-sm ml-2 capitalize\">\n                {user?.name}\n              </p>\n            </div>\n          ) : (\n            <Button\n              loading={connecting}\n              className=\"w-28\"\n              onClick={onConnect}\n              leftIcon={\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-5 w-5 mr-1\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"\n                  />\n                </svg>\n              }\n            >\n              Connect\n            </Button>\n          )}\n        </div>\n      </header>\n      <main className=\"dashboard-main pb-4 container flex relative\">\n        <aside className=\"flex-3 pt-6\">\n          <div className=\"dashboard-aside px-8\">\n            <h2 className=\"font-bold text-gray-500\">\n              You might find these posts interesting\n            </h2>\n            <InterestingSkeleton />\n            <InterestingSkeleton />\n            <hr className=\"h-1 w-full bg-gray-100 rounded-xl mt-4\" />\n            <div className=\"flex justify-between items-end mt-auto\">\n              <div className=\"flex w-full justify-between items-end\">\n                {connected ? (\n                  <>\n                    <div className=\"flex\">\n                      <img\n                        src={user?.avatar}\n                        alt=\"avatar\"\n                        className=\"w-12 h-12 rounded-full shadow g-gray-200 ring-2 ring-indigo-400 ring-offset-2 ring-opacity-50\"\n                      />\n                      <div className=\"flex flex-col items-start\">\n                        <p className=\"text-gray-700 font-bold text-lg ml-3 capitalize\">\n                          {user?.name}\n                        </p>\n                        <p className=\"text-gray-700 text-sm ml-3\">\n                          @{displayKey(publicKey!)}\n                        </p>\n                      </div>\n                    </div>\n                    {!!user && <EditProfile name={user.name} />}\n                  </>\n                ) : (\n                  <Button\n                    loading={connecting}\n                    className=\"w-full\"\n                    onClick={onConnect}\n                  >\n                    Connect to Phantom\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </aside>\n        <aside className=\"flex-5 pt-6\">\n          <div className=\"px-8\">\n            <PostForm\n              postTitle={postTitle}\n              postContent={postContent}\n              setPostTitle={setPostTitle}\n              setPostContent={setPostContent}\n              onSubmit={() => onCreatePost(postTitle, postContent)}\n            />\n            {posts.map(({ title, content, userId, id, prePostId }, i) => {\n              return (\n                <PostCard\n                  key={id}\n                  id={id}\n                  title={title}\n                  content={content}\n                  user={userId}\n                  prePostId={prePostId}\n                  nextPostId={posts[i - 1]?.id}\n                  date=\"Dec 2, 2021\"\n                />\n              );\n            })}\n          </div>\n        </aside>\n        <aside className=\"flex-3 pt-6\">\n          <div className=\"px-8 dashboard-aside\">\n            <h2 className=\"font-bold text-gray-500\">Sponsored</h2>\n            <SponsoredSkeleton />\n            <SponsoredSkeleton />\n            <div className=\"flex justify-end mt-auto\">\n              <p className=\"text-sm\">© 2021 BloG, Inc.</p>\n            </div>\n          </div>\n        </aside>\n      </main>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Dashboard } from \"src/pages/dashboard\";\n\nexport const Router: FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/dashboard\">\n          <Dashboard />\n        </Route>\n        <Route path=\"/\">\n          <Dashboard />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","import {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { getPhantomWallet } from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { FC } from \"react\";\nimport { BlogProvider } from \"src/context/Blog\";\nimport { Router } from \"src/router\";\n\nconst wallets = [getPhantomWallet()];\nconst endPoint = clusterApiUrl(\"devnet\");\n// const localnetEndpoint = \"http://localhost:8899\"\n\nexport const App: FC = () => {\n  return (\n    <ConnectionProvider endpoint={endPoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <BlogProvider>\n          <Router />\n        </BlogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport { App } from \"src/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}